INSTALLING GIT
002	 
003	1. Mac : http://sourceforge.net/projects/git-osx-installer/
004	 
005	2. Windows : http://msysgit.github.io/
006	 
007	3. Linux : apt-get install git-core OR yum install git-core
008	 
009	ABOUT GIT
010	 
011	1. Git is a version control tool that saves changes to groups of files so you can revert back if needed.
012	 
013	2. There are different types of version control tools
014	 
015	a. Local Version Control saves changes to files in a database
016	 
017	b. Centralized Version Control saves changes to a shared server
018	 
019	c. Distributed Version Control allows for easier sharing of files then LVC and also eliminates problems that could occur if access to the server is lost under a CVC system.
020	 
021	d. DVC clients have a complete backup of the files on their computer. If the server is lost the client just waits to regain contact and then uploads changes.
022	 
023	3. When you commit changes to files Git stores a reference of what the files look like at that moment. If a file isn't changed it isn't stored again.
024	 
025	4. Each client has a complete history of all changes stored locally. The client can also access all changes made to the files historically with a simple command. Also those files cannot be changed without Git knowing and changes are difficult to lose.
026	 
027	5. Files transition between 3 states with Git
028	 
029	a. Modified Files are files that have been recently changed
030	 
031	b. Staged Files have been marked to be saved
032	 
033	c. Committed Files are those that have been saved
034	 
035	6. Git saves all file changes to a directory as a compressed database.
036	 
037	a. You modify files in Working Directory
038	 
039	b. You notify that want to save changes in your Staging Area
040	 
041	c. After you Commit the file changes are saved in the Git directory
042	 
043	USING GIT
044	 
045	1. git config --global user.name "Derek Banas"
046	 
047	2. git config --global user.email derekbanas@verizon.net
048	 
049	3. git config --global core.editor "vim" # Set editor as vim
050	 
051	4. git config --global core.editor "edit -w" # Set editor as Text Wrangler Mac
052	 
053	5. git config --list # Show settings
054	 
055	6. git help OR git help [COMMAND] OR git help add
056	 
057	7. ---------------- Track a directory ----------------
058	 
059	a. Go to directory
060	 
061	b. ls -a shows all files
062	 
063	c. git init # Creates the .git directory
064	 
065	8. ---------------- Start tracking files ----------------
066	 
067	a. By type : git add *.java
068	 
069	b. By name : git add AndroidManifest.xml
070	 
071	9. ---------------- Ignore Files ----------------
072	 
073	a. Create a .gitignore file
074	 
075	b. https://github.com/github/gitignore
076	 
077	10. ---------------- git commit -m 'Initial project version'
078	 
079	a. Commits the changes and sets an abbreviated commit message
080	 
081	11. ---------------- git status ----------------
082	 
083	a. Shows the state of your files meaning if they are tracked, have been modified and the branch your on.
084	 
085	12. ---------------- Stage A Modified File ----------------
086	 
087	a. Change the file and save
088	 
089	b. git diff # Shows what you changed, but haven't staged
090	 
091	c. git add AndroidManifest.xml # Stage file
092	 
093	d. git diff --cached # Shows what has been staged, but not committed
094	 
095	13. ---------------- Commit The Changes ----------------
096	 
097	a. commit # Opens the editor we defined above or vi
098	 
099	b. In vi click [ESC] i to enter insert mode
100	 
101	c. Type a heading that briefly explains the changes in 50 characters or less
102	 
103	d. Describes the original problem that is being addressed
104	 
105	e. Describes the specific change being made
106	 
107	f. Describes the result of the change
108	 
109	g. Describes any future improvements
110	 
111	h. Post a closes bug notation Closes-Bug: #1291621
112	 
113	i. Hit [ESC] and type wq to save and exit
114	 
115	j. git commit -a -m 'Changed comment' # Skips staging and commit message
116	 
117	14. ---------------- Remove a File ----------------
118	 
119	a. rm DeleteMe.txt # If you remove a file it shows as "Changed but not updated"
120	 
121	b. git status # If you remove a file it shows as "Changed but not updated"
122	 
123	c. git rm DeleteMe.txt
124	 
125	d. git status # Shows that the file was deleted
126	 
127	e. If you have committed a file to be removed you must add the -f option
128	 
129	f. git rm --cached DeleteMe.txt # Keep file, but remove from staging area
130	 
131	g. git mv DeleteMe.txt Delete.txt # Renames a file
132	 
133	15. ---------------- Log Commit History  ----------------
134	 
135	a. git log # Shows all of the previous commit messages in reverse order
136	 
137	b. git log --pretty=oneline # Shows commits on one line
138	 
139	c. git log --pretty=format:"%h : %an : %ar : %s"
140	 
141	I. %h - Abbreviated Hash 
142	 
143	II. %an - Authors Name
144	 
145	III. %ar - Date Changed
146	 
147	IV. %s - First Line of Comment
148	 
149	d. git log -p -2 # Shows the last 2 commit changes
150	 
151	e. git log --stat # Prints abbreviated stats
152	 
153	f. git log --since=1.weeks # Show only changes in the last week
154	 
155	g. git log --since="2014-04-12" # Show changes since this date
156	 
157	h. git log --author="Derek Banas" # Changes made by author
158	 
159	i. git log --before="2014-04-13" # Changes made before this date
160	 
161	16. ---------------- Undoing a Commit ----------------
162	 
163	a. git commit --amend # If you want to change your previous commit
164	 
165	b. Normally done if you forgot to stage a file, or to change the commit message
166	 
167	17. ---------------- Unstage a File ----------------
168	 
169	a. git reset HEAD AndroidManifest.xml

---------------- GIT PART 2 ----------------
02	 
03	1. GitHub allows you to host your code repositories online. I'll set up everything for it in this video. I'll also cover remote depositories in general.
04	 
05	2. Remote repositories are normally read only, or read write only to those who are authorized
06	 
07	3. You either push or pull updates from these remote repositories.
08	 
09	4. To push your directory to GitHub ----------------
10	 
11	a. git init
12	 
13	b. git add . # Stages all new and modified files and directories
14	 
15	c. git commit -m 'Initial Project Version'
16	 
17	d. git remote add origin https://github.com/derekbanas/SimpleFragment.git
18	 
19	e. git push origin master
20	 
21	5. git remote -v # Lists all remotes and their URLs
22	 
23	6. git fetch origin # Gets data from the remote, but it doesn't merge changes with your work
24	 
25	7. git pull https://github.com/derekbanas/SimpleFragment.git
26	 
27	a. Pulls all changes and saves them to your directory
28	 
29	8. How to push changes to GitHub ----------------
30	 
31	a. I add .gitignore for Android on my local machine
32	 
33	b. In the terminal type
34	 
35	I. git add .gitignore # Stage .gitignore
36	 
37	II. git commit -m 'Added .gitignore for Android' # Commit
38	 
39	III. git push # Push the changes to GitHub
40	 
41	9. git remote rename origin sf # Renames remote to sf
42	 
43	10. Tagging ----------------
44	 
45	a. Tags are used to tag files at important points in history
46	 
47	b. git tag -a v0.1 -m 'version 0.1' # Creates an annotated tag
48	 
49	c. git tag # Shows all the tags
50	 
51	d. git show v0.1 # Shows details about the commit that was tagged
52	 
53	e. git tag v0.4-lw
54	 
55	I. Creates a lightweight tag on a commit that stores the hash for the commit
56	 
57	f. git tag -a v0.01 c930a8
58	 
59	I. You can tag commits after the event also. When you enter this command an editor opens for you to leave a comment. The final part is the hash for the commit you want to tag.
60	 
61	g. git push sf v0.1 # You can also push tags
62	 
63	I. The tag shows up under releases on GitHub
64	 
65	II. git push sf --tags # You can also push all tags at once
66	 
67	h. You can set aliases to save time
68	 
69	I. git config --global alias.co commit
70	 
71	II. Now you can type git co to commit
72	 
73	i. Clone a GitHub Repository
74	 
75	I. Go to the directory you want to use
76	 
77	II. git clone https://github.com/derekbanas/google-api-nodejs-client.git

---------------- GIT PART 3 ----------------
002	 
003	1. Branching allows you to take a project in your own direction without effecting the main code. You use them to make sure you don't introduce unstable code to the master branch.
004	 
005	2. When you commit a project :
006	 
007	a. Each file is given a hash code
008	 
009	b. A tree object that contains those files and the associated hash codes receives a hash code
010	 
011	c. A commit object stores a reference to the tree and other data like the author, commit comment, a reference to the previous commit and other data.
012	 
013	3. The default branch is called the master. As you make additional commits the current newest version is referred to as the master.
014	 
015	4. If you create a branch you can go in a different direction with the project without effecting the master until you merge. Each branch creates a new pointer to a committed version of files and doesn't make another copy of the files.
016	 
017	5. We can actually create many branches, but be careful while doing this because it can get to be hard to merge multiple branches. A pointer known as HEAD can be pointed at any committed version or to any branch with the checkout command.
018	 
019	6. When you are finished with your branch you can merge back into the master commit and move on. You can also do all of this locally or on a remote.
020	 
021	7. ---------------- Simple Branch Example ----------------
022	 
023	a. git checkout -b fix20 # Create a branch and switch to it
024	 
025	I. Same as :
026	    git branch fix20
027	    git checkout fix20
028	 
029	b. Change AndroidManifest.xml in vim
030	 
031	c. git commit -a -m 'Added Branch fix20' # Commit the change to the branch, but not to master
032	 
033	d. git checkout master # Switch to master
034	 
035	e. git push origin fix20 # Push the branch to GitHub
036	 
037	f. git fetch origin # If someone else fetches from the server they get a reference to the branch on the server but not all the files
038	 
039	g. git checkout -b fix20 origin/fix20 # Retrieves the branch fix20
040	 
041	h. git branch # Shows all branches
042	 
043	i. git branch --merged # Shows all merged branches
044	 
045	j. git branch --no-merged # Shows unmerged branches
046	 
047	k. git branch -v # Shows all branches and their last commits
048	    # * Points out the branch currently checked out
049	 
050	l. git merge fix20 # Merge the branch version with the master
051	   git push # Push the change to GitHub
052	 
053	m. git branch -d fix20 # You can delete merged branches with this
054	 
055	n. git branch -D fix22 # Deletes unmerged branches
056	 
057	o. git push origin :fix20 # Deletes the branch on GitHub
058	 
059	p. git branch -m newBranchName # Renames a branch
060	 
061	8. ---------------- Multiple Branch Example ----------------
062	 
063	a. a. git checkout -b fix21 # Create a branch and switch to it
064	 
065	b. Edit AndroidManifest.xml
066	 
067	c. git commit -a -m 'Added Branch fix21'
068	 
069	d. git checkout master # Switch to master
070	 
071	e. Look at Manifest to see that nothing changed
072	 
073	f. git checkout -b 'hotfix' # Create a new branch
074	 
075	g. git commit -a -m 'Added Hot Fix' # Commit the Hot Fix
076	     
077	h. git checkout master # Switch to master
078	     
079	i. git merge hotfix # Merge the hotfix version with the master
080	 
081	j. git branch -d hotfix # Delete the hotfix branch
082	 
083	k. git checkout fix21 # Switch to fix21 branch
084	 
085	l. git checkout master # Make sure you are in master
086	     
087	m. git merge fix21 # Merges the branch and master if there are no conflicts
088	     
089	n. If there is a conflict resolve it
090	 
091	o. git branch -d fix21 # Delete the unneeded branch
092	   git branch -D fix21 # To force delete
093	     
094	p. git mergetool # You can merge with a graphical tool
095	 
096	I. Backup : Contents of the file before calling the merge tool
097	 
098	II. Base : The common ancestor of the files being merged
099	 
100	III. Local : Version being pointed at by HEAD
101	 
102	IV. Remote : The branch being merged into head
103	 
104	9. ---------------- Rebasing Example ----------------
105	 
106	a. Rebasing moves a branch to a new ( master / base ) commit. This is also referred to as a fast forward merge. Just never rebase commits that have been pushed to a public repository
107	 
108	b. git checkout -b fix22
109	 
110	c. Edit AndroidManifest.xml
111	 
112	d. git commit -a -m 'Changed the comment to 10'
113	 
114	e. git checkout -b hotfix
115	 
116	f. Edit another file other then AndroidManifest
117	 
118	g. git commit -a -m 'Edited file....'
119	 
120	h. git checkout master
121	 
122	i. git merge hotfix
123	 
124	j. git branch -d hotfix
125	 
126	k. git checkout fix22
127	 
128	l. git rebase master # Move branch to new master commit
129	 
130	m. git checkout master
131	 
132	n. git merge fix22
133	 
134	10. ---------------- Reverting Vs. Resetting Example ----------------
135	 
136	a. Some times you want to eliminate a previous commit, but you still want to keep the commit for integrity reasons. Revert undoes changes made in that commit and makes a new commit. Reset actually deletes the commit which can cause problems.
137	 
138	b. Do something that will be undone
139	 
140	c. git commit -m 'Made a change that I will undo'
141	 
142	d. git revert HEAD # You are back to where you started, but the commit was made
143	 
144	e. Reset eliminates previous commits and you can never get them back. You really should never use it actually.
145	 
146	f. git reset someFile # Removes a file from the staging area, but leave the working directory unchanged
147	 
148	g. git reset # Reset the staging area to match the most recent commit while leaving the working directory unchanged
149	 
150	h. git reset aCommit # Move back to this previous commit, reseting the staging area, but not the working directory
151	 
152	i. git reset --hard # Reset both the staging area and working directory to match the most recent commit
153	 
154	j. git reset --hard aCommit # Move back to the commit listed and change staging and working directory
155	 
156	11. ---------------- Clean Example ----------------
157	 
158	a. Clean removes untracked files from your directory and is undoable.
159	 
160	b. git clean -n # Shows which files will be removed
161	 
162	c. git clean -f # Remove untracked files
163	 
164	d. gir clean -df # Remove untracked files and untracked directories in the current directory
165	 
166	e. git reset --hard # Undoes changes on all tracked files
167	   git clean -df # Removes all untracked files

---------------- GIT PART 4 ----------------
002	 
003	1. Here I'll demonstrate a workflow option with git called Fork 7 Pull. I'll also answer some questions I've received like how to work with multiple GitHub accounts on the same computer.
004	 
005	---------------- GENERATING SSH KEYS ----------------
006	 
007	2. SSH keys allow you to identify trusted computers without the need for passwords and here I'll show you how to generate multiple codes for multiple GitHub accounts.
008	 
009	a. ssh-keygen -t rsa -C "Your Email Address" # Generates the key
010	 
011	3. Then you have to define the name of the file you want to save the key in
012	 
013	4. A public key and a randomart image are generated. The randomart image is provided because it is easier to recognize then a random string of numbers.
014	 
015	5. cd ~/.ssh # Takes us to the location of our keys
016	 
017	6. I'll open the public key with vim
018	 
019	7. Now I'll copy the entire key from ssh-rsa till the end with my email
020	 
021	8. Got to GitHub and sign in
022	 
023	9. Click on account settings
024	 
025	10. Click on SSH
026	 
027	11. Give the key a name, paste in the key and click add key
028	 
029	12. Your public key is then listed
030	 
031	---------------- CREATING MULTIPLE GITHUB ACCOUNTS ----------------
032	 
033	13. Now I'll create another ssh key for a completely new account on GitHub
034	    ssh-keygen -t rsa -C "Your Email Address" # Generates the key
035	 
036	14. Give it a name
037	 
038	15. A public key and randomart are generated again
039	 
040	16. cd ~/.ssh # Takes me to the location for the keys
041	    ls # Lists everything in the directory
042	     
043	17. Go to GitHub again using a different GitHub account and click Account Settings
044	 
045	18. vim newthinktank.pub # Get the new key that was generated
046	 
047	19. Copy the key
048	 
049	20. After you click SSH Keys in the sidebar on GitHub, paste the key in, give it a title and click Add Key
050	 
051	21. We used a unique name for our keys so we have to tell ssh about them.
052	    ssh-add ~/.ssh/derekbanas
053	    ssh-add ~/.ssh/newthinktank
054	     
055	22. touch ~/.ssh/config # Creates the empty file config
056	    vim config # Open config
057	     
058	23. We are defining which account we want to work with by associating a keyword to our 2 different hosts.
059	 
060	Host github.com
061	    HostName github.com
062	    User git
063	    IdentityFile ~/.ssh/derekbanas
064	     
065	Host github-ntt
066	    HostName github.com
067	    User git
068	    IdentityFile ~/.ssh/newthinktank
069	     
070	24. Change to the directory you want to use on GitHub
071	 
072	25. This is the account on GitHub that holds the original master files
073	 
074	26 - 28. After I edit some files I stage them and commit them
075	 
076	29. git remote add myorigin git@github-ntt:newthinktank/CrazyTipCalc.git
077	 
078	a. Create an alias for our remote directory
079	 
080	b. github-ntt # I identify myself using the newthinktank ssh key
081	 
082	c. newthinktank/CrazyTipCalc.git # The specific files I want on GitHub
083	 
084	30. git push myorigin master
085	When you try to push to GitHub you may see this warning. You can verify you are pushing to GitHub by comparing the public keys
086	 
087	31 - 34. You can see GitHubs public keys here
088	https://help.github.com/articles/what-are-github-s-ssh-key-fingerprints
089	 
090	35 - 37. Log into GitHub using my derekbanas account and search for the directory I have associated with my newthinktank account
091	 
092	38 - 41. Get the URL from GitHub and I can clone it
093	git clone https://github.com/newthinktank/CrazyTipCalc.git 
094	 
095	---------------- FORK & PULL WORKFLOW ----------------
096	 
097	The way the Fork & Pull works is that anyone can Fork a repository and make changes locally. They don't have the ability to push their potentially damaging code. They can however request that the host repository pull their changes if they would like using a Pull Request. ( This is a very common workflow in the open source community )
098	 
099	42. Find a repository you'd like to work on and click Fork in GitHub
100	 
101	43 - 45. git clone https://github.com/derekbanas/CrazyTipCalc.git
102	    # Get the URL for the fork on GitHub and clone it on your local computer
103	 
104	46. git remote add upstream https://github.com/derekbanas/CrazyTipCalc.git
105	    # Assigns the original remote and not the fork to the keyword upstream
106	     
107	47. git fetch upstream
108	    # Pull in changes made in the original repository with effecting the local files
109	 
110	48 - 53. I can change a file locally, stage and commit it. I can then push it to more Fork on GitHub.
111	 
112	54. git merge upstream/master # Merges files on GitHub with my local files
113	 
114	55. If I think my changes should be merged with the original repository I can make a Pull Request. Click on Compare, review, create a pull request on GitHub.
115	 
116	56. Changes are listed as well as other data associated with your Forked version. Click the button labeled Create Pull Request if you think you're ready.
117	 
118	57 - 58. Leave a detailed reason why the Pull Request should be excepted and click Send Pull Request
119	 
120	59. The owner of the original repository can see how many Pull Requests they have received on the right side of the screen.
121	 
122	60 - 63. They can go through the Pull Requests and decide what to do. 
123	 
124	64 - 65. To merge click Merge Pull Request in GitHub and then leave a detailed explanation why it was done.

